/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            /* Another possibility:
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
*/
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_vert_UH_N1 {
            bindings = <&kp N1>;
            key-positions = <15 29>;
        };

        combo_vert_UH_N2 {
            bindings = <&kp N2>;
            key-positions = <16 30>;
        };

        combo_vert_UH_N3 {
            bindings = <&kp N3>;
            key-positions = <17 31>;
        };

        combo_vert_UH_N4 {
            bindings = <&kp N4>;
            key-positions = <18 32>;
        };

        combo_vert_UH_N5 {
            bindings = <&kp N5>;
            key-positions = <19 33>;
        };

        combo_vert_UH_N6 {
            bindings = <&kp N6>;
            key-positions = <22 40>;
        };

        combo_vert_UH_N7 {
            bindings = <&kp N7>;
            key-positions = <23 41>;
        };

        combo_vert_UH_N8 {
            bindings = <&kp N8>;
            key-positions = <24 42>;
        };

        combo_vert_UH_N9 {
            bindings = <&kp N9>;
            key-positions = <25 43>;
        };

        combo_vert_UH_N0 {
            bindings = <&kp N0>;
            key-positions = <26 44>;
        };

        combo_vert_HL_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <29 47>;
        };

        combo_vert_HL_at {
            bindings = <&kp AT>;
            key-positions = <30 48>;
        };

        combo_vert_HL_hash {
            bindings = <&kp HASH>;
            key-positions = <31 49>;
        };

        combo_vert_HL_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <32 50>;
        };

        combo_vert_HL_percent {
            bindings = <&kp PERCENT>;
            key-positions = <33 51>;
        };

        combo_vert_HL_caret {
            bindings = <&kp CARET>;
            key-positions = <40 54>;
        };

        combo_vert_HL_ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <55 41>;
        };

        combo_vert_HL_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <56 42>;
        };

        combo_vert_HL_lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <57 43>;
        };

        combo_vert_HL_rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <44 58>;
        };

        combo_less {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LT>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp PLUS>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp MINUS>;
        };

        combo_lbrace {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp LBRC>;
        };

        combo_rbrace {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp RBRC>;
        };

        combo_multiply {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp STAR>;
        };

        combo_divide {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp FSLH>;
        };

        combo_more {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp GT>;
        };

        combo_hrsqt {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&kp SQT>;
        };

        comma_hrexclamation {
            timeout-ms = <50>;
            key-positions = <29 31>;
            bindings = <&kp EXCLAMATION>;
        };

        combo_hrcolon {
            timeout-ms = <50>;
            key-positions = <29 32>;
            bindings = <&kp COLON>;
        };

        combo_hrunder {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp UNDER>;
        };

        combo_hrbslh {
            timeout-ms = <50>;
            key-positions = <32 30>;
            bindings = <&kp BSLH>;
        };

        combo_hrdot {
            timeout-ms = <50>;
            key-positions = <32 31>;
            bindings = <&kp DOT>;
        };

        combo_hrlpar {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp LPAR>;
        };

        combo_hrrpar {
            timeout-ms = <50>;
            key-positions = <41 40>;
            bindings = <&kp RPAR>;
        };

        combo_hrcomma {
            timeout-ms = <50>;
            key-positions = <41 42>;
            bindings = <&kp COMMA>;
        };

        comma_hrfslh {
            timeout-ms = <50>;
            key-positions = <43 41>;
            bindings = <&kp FSLH>;
        };

        comma_hrsemi {
            timeout-ms = <50>;
            key-positions = <41 44>;
            bindings = <&kp SEMI>;
        };

        combo_hrdash {
            timeout-ms = <50>;
            key-positions = <42 43>;
            bindings = <&kp MINUS>;
        };

        combo_hrqmark {
            timeout-ms = <50>;
            key-positions = <42 44>;
            bindings = <&kp QMARK>;
        };

        combo_hrdqt {
            timeout-ms = <50>;
            key-positions = <44 43>;
            bindings = <&kp DQT>;
        };

        combo_cut {
            timeout-ms = <50>;
            key-positions = <47 48>;
            bindings = <&kp LC(X)>;
        };

        combo_copy {
            timeout-ms = <50>;
            key-positions = <48 49>;
            bindings = <&kp LC(C)>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <49 50>;
            bindings = <&kp LC(V)>;
        };

        combo_lbraket {
            timeout-ms = <50>;
            key-positions = <51 50>;
            bindings = <&kp LBKT>;
        };

        combo_rbraket {
            timeout-ms = <50>;
            key-positions = <54 55>;
            bindings = <&kp RBKT>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <55 56>;
            bindings = <&kp EQUAL>;
        };

        combo_undo {
            timeout-ms = <50>;
            key-positions = <56 57>;
            bindings = <&kp LC(Z)>;
        };

        combo_redo {
            timeout-ms = <50>;
            key-positions = <57 58>;
            bindings = <&kp LS(LC(Z))>;
        };

        combo_dashspace {
            timeout-ms = <50>;
            key-positions = <66 67>;
            bindings = <&kp MINUS>;
        };

        combo_underspace {
            timeout-ms = <50>;
            key-positions = <66 65>;
            bindings = <&kp UNDER>;
        };

        combo_capsword {
            timeout-ms = <50>;
            key-positions = <69 70>;
            bindings = <&caps_word>;
        };

        combo_thumbs_right_repeat {
            bindings = <&key_repeat>;
            key-positions = <69 68>;
        };

        combo_all_left_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <29 31 30 32>;
        };

        combo_all_rite {
            bindings = <&kp BACKSPACE>;
            key-positions = <41 42 43 44>;
        };
    };

    macros {
        thorn: thorn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H>, <&macro_press>;

            label = "THORN";
        };

        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp GRAVE>;

            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1          &kp N2           &kp N3              &kp N4            &kp N5     &tog 3                                                           &mo 5   &kp N6  &kp N7             &kp N8               &kp N9           &kp N0           &kp MINUS
&kp TAB    &kp COMMA       &lt 3 Q          &kp U               &kp DOT           &kp GRAVE  &kp ESCAPE                                                       &tog 1  &kp K   &kp G              &kp H                &kp C            &kp W            &kp BSLH
&kp ESC    &hm LEFT_GUI A  &hm LEFT_ALT O   &hm LEFT_CONTROL E  &hm LEFT_SHIFT I  &kp P      &kp BACKSPACE  &kp LCTRL  &kp LALT        &kp LGUI    &kp RCTRL  &tog 2  &kp M   &hm RIGHT_SHIFT T  &hm RIGHT_CONTROL N  &hm LEFT_ALT S   &hm RIGHT_GUI R  &kp BACKSPACE
&kp LSHFT  &kp SLASH       &hm RIGHT_ALT X  &kp Z               &kp Y             &kp J                                &kp GRAVE       &kp RETURN                     &kp B   &kp D              &kp L                &hm RIGHT_ALT F  &kp V            &kp RSHFT
&mo 4      &kp HOME        &kp END          &kp LEFT            &kp RIGHT                    &lt 3 SPACE    &kp TAB    &kp RETURN      &thorn      &kp H      &kp T           &kp UP             &kp DOWN             &kp PG_UP        &kp PG_DN        &mo 4
            >;
        };

        layer_small_kbd_mask {
            bindings = <
&none   &none   &none   &none   &none   &none   &trans                                      &trans  &none   &none   &none   &none   &none   &none
&none   &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &none
&none   &trans  &trans  &trans  &trans  &trans  &trans  &none   &none       &none   &none   &trans  &trans  &trans  &trans  &trans  &trans  &none
&none   &trans  &trans  &trans  &trans  &trans                  &none       &none                   &trans  &trans  &trans  &trans  &trans  &none
&trans  &none   &none   &none   &none           &trans  &trans  &trans      &trans  &trans  &trans          &none   &none   &none   &none   &trans
            >;
        };

        layer_qwerty {
            bindings = <
&kp EQUAL       &kp N1     &kp N2        &kp N3    &kp N4     &kp N5  &trans                                      &trans  &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB         &kp Q      &kp W         &kp E     &kp R      &kp T   &trans                                      &trans  &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BACKSLASH
&kp ESC         &kp A      &kp S         &kp D     &kp F      &kp G   &trans  &trans  &trans      &trans  &trans  &tog 2  &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z      &kp X         &kp C     &kp V      &kp B                   &trans      &kp T                   &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RIGHT_SHIFT
&trans          &kp GRAVE  &kp CAPSLOCK  &kp LEFT  &kp RIGHT          &trans  &trans  &trans      &trans  &trans  &trans          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &trans
            >;
        };

        layer_keypad {
            bindings = <
&trans  &trans     &trans    &trans    &trans     &trans  &trans                                                   &trans        &trans  &kp KP_NUM    &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&trans  &trans     &trans    &trans    &trans     &trans  &none                                                    &none         &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp KP_MINUS     &trans
&trans  &trans     &trans    &trans    &trans     &trans  &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none         &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6   &kp KP_PLUS      &trans
&trans  &trans     &trans    &trans    &trans     &trans                       &kp HOME      &kp PG_UP                           &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp KP_ENTER     &trans
&mo 4   &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp NUMBER_0          &kp UP        &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 4
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 3                                      &mo 5   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_bkup_numpad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 5      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&trans     &trans     &trans    &trans    &trans     &trans  &none                                                    &none      &trans  &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&trans     &trans     &trans    &trans    &trans     &trans  &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &trans  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&trans     &trans     &trans    &trans    &trans     &trans                       &kp HOME      &kp PG_UP                        &trans  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 4      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 4
            >;
        };
    };
};
